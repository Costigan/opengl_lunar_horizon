#version 150

precision highp float;

const vec3 ambient = vec3(0.1, 0.1, 0.1);
const vec3 lightVecNormalized = normalize(vec3(1.0, 0.2, 0.8));
const vec3 LightColor = vec3(0.9, 0.9, 0.7);
const float distance = 1.0;
const float LightPower = 1.0;
const float BlueHue = 0.66666;

const vec3 MaterialSpecularColor = vec3(1, 1, 1);

uniform sampler2D MyTexture0;

in vec3 vertexPosition_worldspace;
in vec3 LightDirection_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 Normal_cameraspace;
in vec2 texture;

out vec4 out_color;

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main(void)
{
	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );

	l = normalize(vec3(0.5, 1, 1));

	float cosTheta = dot(n, l);

	vec3 MaterialDiffuseColor = vec3(texture2D(MyTexture0, texture));
	vec3 MaterialAmbientColor = MaterialDiffuseColor;

	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);

	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l, n);



	vec3 hsv = rgb2hsv(MaterialDiffuseColor);
	float blueFactor = clamp(1 - abs(hsv.x - BlueHue), 0, 1);
    blueFactor = pow(blueFactor, 5);// * hsv.z;
	if (blueFactor < 0.75)
		blueFactor = pow(blueFactor, 5);
	float specularFactor = LightPower * pow(cosAlpha,10) * blueFactor;
 
	vec3 color =
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * specularFactor / (distance*distance);

	out_color = vec4(color, 1);

	//if (blueFactor > 0.75)
	//	out_color = vec4(1, 0, 0, 1);
}

