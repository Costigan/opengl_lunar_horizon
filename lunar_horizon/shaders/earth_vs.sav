#version 130

precision highp float;

uniform mat4 MVP;
uniform mat4 MV;
uniform mat4 M;
uniform vec4 LightPosition_worldspace;

in vec3 vertexPosition_modelspace;
in vec3 vertexNormal_modelspace;
in vec2 in_texture;

out vec3 vertexPosition_worldspace;
out vec3 LightDirection_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 Normal_cameraspace;
out vec2 texture;

void main(void)
{
  texture = in_texture;

  // Output position of the vertex, in clip space : MVP * position
  gl_Position =  MVP * vec4(vertexPosition_modelspace, 1);

  // Normal of the the vertex, in camera space.  Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
  Normal_cameraspace = ( MV * vec4(vertexNormal_modelspace, 0)).xyz;

  // Position of the vertex, in worldspace : M * position
  vertexPosition_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;
 
  // Vector that goes from the vertex to the camera, in camera space.
  // In camera space, the camera is at the origin (0,0,0).
  vec3 vertexPosition_cameraspace = ( MV * vec4(vertexPosition_modelspace,1)).xyz;
  EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
 
  // Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
  vec3 LightPosition_cameraspace = ( MV * LightPosition_worldspace).xyz;
  LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
}